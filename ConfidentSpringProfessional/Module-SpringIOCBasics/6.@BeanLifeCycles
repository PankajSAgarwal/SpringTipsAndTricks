1. There is one last thing to know when it comes to Spring @Beans. Sometimes you want to do something, right after bean gets created or right before the application shuts down, before the bean gets destroyed. Why?

• Imagine your InvoiceService needs to sync itself with Amazon S3, maybe because you have a template.pdf saved onto S3 that you want to cache locally and use whenever you create an instance of your InvoiceService. Instead of downloading the template every time you want to create an invoice.

• A good way to do this, instead of doing it in the constructor, could be right after your InvoiceService gets created, but before another class can call methods on it.

• Spring offers different ways to achieve this, but a popular one is using the @PostConstruct and @PreDestroy annotations.

2. Java9+ changes

• If you are working with a Java version >9 (and you should be using at least Java 11 ), you need to add the following dependency to your project to be able to use the upcoming javax annotations.

<dependency>
    <groupId>javax.annotation</groupId>
    <artifactId>javax.annotation-api</artifactId>
    <version>1.3.2</version>
</dependency>

3. Adding @PostConstruct

• Go to your InvoiceService and add the following method:

@PostConstruct
public void init() {
    System.out.println("Fetching PDF Template from S3...");
    // TODO download from s3 and save locally
}

• For @PostConstruct to work, you need to create a public method and give it any name you want. And obviously don’t forget the annotation. (Note: The method itself is only faking downloading a file from S3, i.e. printing out a corresponding line to System.out as this is not in the scope of this course).

• Time to test this.

• Checkpoint: @PostConstruct

Restart your application. Make sure your log contains the following line when you boot up your application:

...
Jun 26, 2020 4:24:23 PM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/9.0.36]
Fetching PDF Template from S3...
Jun 26, 2020 4:24:24 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-nio-8080"]
@PostConstruct works! Spring instantiated the InvoiceService and after it injected all its dependencies, it called your init() method because it is annotated with the @PostConstruct annotation.

4. Why to use @PostConstruct?

• The question is, why did you have to use @PostConstruct in this case? Couldn’t you have just fetched the PDF template from S3 in the constructor?

• If you are using constructor injection - yes, you could have used the constructor. Though, using constructors for this kind of additional logic is rather ugly and not recommended.

• If you are using field injection, however, you couldn’t execute this logic inside the constructor, because Spring injects fields after calling the constructor.

• And as implied above, if you want to make sure that your object, including all its dependencies is completely constructed, you will need to use @PostConstruct.

5. Adding @PreDestroy

• Similarly to @PostConstruct, there’s also the @PreDestroy method, which gets called whenever you shut down your applicationContext gracefully.

• You use it for cleaning any open resources, like deleting that S3 template that you downloaded before with @PostConstruct, or shutting down any database connections.

As Java does not have "destructors" like other languages, you’ll need to use that additional annotation instead.

• Go to your InvoiceService and add the following method:

@PreDestroy
public void shutdown() {
    System.out.println("Deleting downloaded templates...");
    // TODO actual deletion of PDFs
}

• Again, you are faking actual deletion of resources like your PDF templates, but in any case this is where you would put the logic. You can give the method any name you want, just make sure to make it public and to not forget the annotation.

6. @PreDestroy caveat

There are two problems when using @PreDestroy.

• The @PreDestroy methods only get executed when you shutdown the ApplicationContext. Which you usually don’t do, explicitly.

• Most IDEs do not shut down your application gracefully, instead, they terminate it. And if you terminate your application, there’s no chance for @PreDestroys to run.

So, this means you first of all have to change your servlet’s init() method like so.

public class MyFancyPdfInvoicesServlet extends HttpServlet {

    private UserService userService;
    private ObjectMapper objectMapper;
    private InvoiceService invoiceService;

    @Override
    public void init() throws ServletException {
        AnnotationConfigApplicationContext ctx
                = new AnnotationConfigApplicationContext(MyFancyPdfInvoicesApplicationConfiguration.class);

        ctx.registerShutdownHook();

        this.userService = ctx.getBean(UserService.class);
        this.objectMapper = ctx.getBean(ObjectMapper.class);
        this.invoiceService = ctx.getBean(InvoiceService.class);
    }

What changed?

ctx.registerShutdownHook();

• It’s just one line. You are registering a shutdown hook, which means that whenever your JVM is about to stop, Spring properly shuts down its applicationContext first and also calls the @PreDestroy methods of all registered @Beans.

• But only, if you are not terminating your application. And unfortunately, this is IDE specific.

• In IntelliJ IDEA, shutdown only works if you run your application, not when you debug it. Then you should find a button which is called exit. Here’s where you will find that button.

Note: It is NOT the big red button at the top

7.Checkpoint: @PreDestroy

• Restart your application and shut it down gracefully.

• You should see the following lines in your log file:

Jun 26, 2020 4:38:15 PM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-nio-8080"]
Jun 26, 2020 4:38:16 PM org.apache.catalina.core.StandardService startInternal
INFO: Starting service [Tomcat]
Jun 26, 2020 4:38:16 PM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/9.0.36]
Fetching PDF Template from S3...
Jun 26, 2020 4:38:17 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-nio-8080"]
Deleting downloaded templates...

Process finished with exit code 1

• Great! @PreDestroy works as expected.

8. Further Reading

• Historically, instead of having the @PostConstruct and @PreDestroy annotations, people were used to implementing Spring specific interfaces (like InitializingBean) to do the same what these annotations do. All these interfaces have been superseded and the Spring documentation recommends both annotations as best practice.

• If you want to read more about this, have a look at the lifecycle callbacks section in the official Spring documentation.

https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-nature

• And as always, you might be wondering why you haven’t encountered the registerShutdownHooks call when using Spring Boot. Simple: Because Spring Boot automatically adds it!


