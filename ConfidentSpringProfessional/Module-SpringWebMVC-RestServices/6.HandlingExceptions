1. Whenever you posted invalid JSON to your endpoints, you got an HTML page with an HTTP 400 or even 500 (bad request) status code.

• It could be, however, that instead of HTML, you want to return a JSON object or an XML object to the user, including modifying the status code.

• This is something which Spring WebMVC cannot do completely by itself, because it does not know exactly what kind of JSON to return. Hence, you’ll need to program an exception handler yourself.

(As you might have guessed, Spring Boot offers a sane, default error object here. More on that later.)

2. Create the following class:

package com.pankaj.myfancypdfinvoices.web;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import javax.validation.ConstraintViolationException;


@RestControllerAdvice
public class GlobalControllerExceptionHandler {

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public String handlemethodArgumentNotValid(MethodArgumentNotValidException exception) { // 
        // TODO you can choose to return your custom object here, which will then get transformed to json/xml etc.
        return "Sorry, that was not quite right: " + exception.getMessage();
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(ConstraintViolationException.class)
    public String handleConstraintViolation(ConstraintViolationException exception) { // 
        // TODO you can choose to return your custom object here, which will then get transformed to json/xml etc.
        return "Sorry, that was not quite right: " + exception.getMessage();
    }
}

3. Let’s break it down.

@RestControllerAdvice
public class GlobalControllerExceptionHandler {

• The @RestControllerAdvice annotation will make sure that Spring will apply whatever this class contains to all of your @Controllers or @RestControllers it knows. You might have thought that it only refers to @RestControllers, but not so.

• There’s is an equivalent @ControllerAdvice annotation, and the difference between these two is not that they apply to only @Controller or only @RestControllers. The difference is, that @ControllerAdvice will write HTML to the user (which you will learn about in the next module), and @RestControllerAdvice will write JSON/XML, or whatever you want, directly to the @ResponseBody.

• You need to add a method that explicitly handles MethodArgumentNotValidExceptions, which will happen when your @RestController fails to validate its @RequestParams.

@ResponseStatus(HttpStatus.BAD_REQUEST)
@ExceptionHandler(MethodArgumentNotValidException.class)
public String handlemethodArgumentNotValid(MethodArgumentNotValidException exception) { // 
    // TODO you can choose to return your custom object here, which will then get transformed to json/xml etc.
    return "Sorry, that was not quite right: " + exception.getMessage();
}

• You can inject the actual validation exception as a method parameter, to find the exact field validation violations and log them out/return them to the user.

• The @ResponseStatus annotation will make sure to always set the correct and appropriate HTTP status code (400).

• And, you can even return your own, custom error object from the handler method, just like in your @RestController, but this will not be covered here. Instead, you will return a simple string with the validation exception’s message.

• Similarly, you also need to catch and handle ConstraintViolationExceptions, if you want to handle the Bean validation errors. Yes, Spring throws two different types of exceptions for two different types of validation (beans vs requestparams).

Agan, you are setting the proper @ResponseStatus, as well as returning the validation exception’s string.

@ResponseStatus(HttpStatus.BAD_REQUEST)
@ExceptionHandler(ConstraintViolationException.class)
public String handleConstraintViolation(ConstraintViolationException exception) { // 
    // TODO you can choose to return your custom object here, which will then get transformed to json/xml etc.
    return "Sorry, that was not quite right: " + exception.getMessage();
}

4. Checkpoint: Exception Handling

When you now restart your application and hit your endpoints with invalid requests, you’ll get the following:

POST http://localhost:8080/invoices?user_id=&amount=1

HTTP/1.1 400
Content-Length: 0
Date: Fri, 14 Feb 2020 17:17:19 GMT
Connection: close

Sorry, that was not quite right: createInvoice.arg1: must be greater than or equal to 10, createInvoice.arg0: must not be blank

A simple 400, with your string response body. It would read much better to put your own, custom error object here and maybe even trace-log the error itself, but that is coming up in the exercise section!

5. A note on advices

@Rest/ControllerAdvices are not just about Spring’s validation exceptions. You can literally catch any exception, including your own business exceptions, inside an @Advice and react with an appropriate response. In that regard, they are a central, last "catch-all" barrier, before a response gets sent back to the client.







